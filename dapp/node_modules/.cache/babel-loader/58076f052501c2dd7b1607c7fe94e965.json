{"ast":null,"code":"import _defineProperty from\"/workspace/box-defi/dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"/workspace/box-defi/dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/workspace/box-defi/dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{BeaconWallet}from\"@taquito/beacon-wallet\";// Actions and types\nimport*as t from\"../types\";// API\nimport{getFA12Balance,getFA2Balance}from\"../../api\";// Globals\nimport{Fruits,network,kUSDAddress,seedAddress,boxFruitAddress}from\"../../utils/global\";export var connectWallet=function connectWallet(requestPermission){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var wallet,activeAccount,accountPkh,_accountPkh;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:wallet=new BeaconWallet({name:\"Box DeFi\",preferredNetwork:network});if(requestPermission){_context.next=12;break;}_context.next=4;return wallet.client.getActiveAccount();case 4:activeAccount=_context.sent;if(!activeAccount){_context.next=10;break;}_context.next=8;return wallet.getPKH();case 8:accountPkh=_context.sent;dispatch({type:t.WalletActionTypes.CONNECT_WALLET,payload:{isConnected:true,walletInstance:wallet,accountPkh:accountPkh}});case 10:_context.next=18;break;case 12:_context.next=14;return wallet.requestPermissions({network:{type:network}});case 14:_context.next=16;return wallet.getPKH();case 16:_accountPkh=_context.sent;dispatch({type:t.WalletActionTypes.CONNECT_WALLET,payload:{isConnected:true,walletInstance:wallet,accountPkh:_accountPkh}});case 18:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var getBalances=function getBalances(){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch,getState){var _fruitBalances;var accountPkh,kUSD,SEED,elderGrape,mangrot,spotBerry,blueStripe,crownApple;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:accountPkh=getState().wallet.accountPkh;_context2.next=3;return getFA12Balance(kUSDAddress,accountPkh);case 3:kUSD=_context2.sent;_context2.next=6;return getFA12Balance(seedAddress,accountPkh);case 6:SEED=_context2.sent;_context2.next=9;return getFA2Balance(boxFruitAddress,accountPkh,\"1\");case 9:elderGrape=_context2.sent;_context2.next=12;return getFA2Balance(boxFruitAddress,accountPkh,\"2\");case 12:mangrot=_context2.sent;_context2.next=15;return getFA2Balance(boxFruitAddress,accountPkh,\"3\");case 15:spotBerry=_context2.sent;_context2.next=18;return getFA2Balance(boxFruitAddress,accountPkh,\"4\");case 18:blueStripe=_context2.sent;_context2.next=21;return getFA2Balance(boxFruitAddress,accountPkh,\"5\");case 21:crownApple=_context2.sent;dispatch({type:t.WalletActionTypes.GET_BALANCES,payload:{tokenBalances:{kUSD:kUSD,SEED:SEED},fruitBalances:(_fruitBalances={},_defineProperty(_fruitBalances,Fruits.ELDER_GRAPE,elderGrape),_defineProperty(_fruitBalances,Fruits.MANGROT,mangrot),_defineProperty(_fruitBalances,Fruits.SPOT_BERRY,spotBerry),_defineProperty(_fruitBalances,Fruits.BLUE_STRIPE,blueStripe),_defineProperty(_fruitBalances,Fruits.CROWN_APPLE,crownApple),_fruitBalances)}});case 23:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2,_x3){return _ref2.apply(this,arguments);};}();};","map":{"version":3,"sources":["/workspace/box-defi/dapp/src/redux/action-creators/wallet.ts"],"names":["BeaconWallet","t","getFA12Balance","getFA2Balance","Fruits","network","kUSDAddress","seedAddress","boxFruitAddress","connectWallet","requestPermission","dispatch","wallet","name","preferredNetwork","client","getActiveAccount","activeAccount","getPKH","accountPkh","type","WalletActionTypes","CONNECT_WALLET","payload","isConnected","walletInstance","requestPermissions","getBalances","getState","kUSD","SEED","elderGrape","mangrot","spotBerry","blueStripe","crownApple","GET_BALANCES","tokenBalances","fruitBalances","ELDER_GRAPE","MANGROT","SPOT_BERRY","BLUE_STRIPE","CROWN_APPLE"],"mappings":"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","sourcesContent":["import { Dispatch } from \"redux\";\nimport { NetworkType } from \"@airgap/beacon-sdk\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\n\n// Actions and types\nimport { WalletAction } from \"../actions\";\nimport * as t from \"../types\";\n\n// API\nimport { getFA12Balance, getFA2Balance } from \"../../api\";\n\n// Globals\nimport { Fruits, network, kUSDAddress, seedAddress, boxFruitAddress } from \"../../utils/global\";\n\nimport { RootState } from \"../reducers\";\n\nexport const connectWallet =\n  (requestPermission: boolean) =>\n  async (dispatch: Dispatch<WalletAction>): Promise<void> => {\n    const wallet = new BeaconWallet({\n      name: \"Box DeFi\",\n      preferredNetwork: network as NetworkType,\n    });\n\n    if (!requestPermission) {\n      const activeAccount = await wallet.client.getActiveAccount();\n      if (activeAccount) {\n        const accountPkh = await wallet.getPKH();\n\n        dispatch({\n          type: t.WalletActionTypes.CONNECT_WALLET,\n          payload: {\n            isConnected: true,\n            walletInstance: wallet,\n            accountPkh,\n          },\n        });\n      }\n    } else {\n      await wallet.requestPermissions({ network: { type: network as NetworkType } });\n\n      const accountPkh = await wallet.getPKH();\n\n      dispatch({\n        type: t.WalletActionTypes.CONNECT_WALLET,\n        payload: {\n          isConnected: true,\n          walletInstance: wallet,\n          accountPkh,\n        },\n      });\n    }\n  };\n\nexport const getBalances = () => async (dispatch: Dispatch<WalletAction>, getState: () => RootState) => {\n  const accountPkh = getState().wallet.accountPkh;\n\n  const kUSD = await getFA12Balance(kUSDAddress, accountPkh);\n  const SEED = await getFA12Balance(seedAddress, accountPkh);\n\n  const elderGrape = await getFA2Balance(boxFruitAddress, accountPkh, \"1\");\n  const mangrot = await getFA2Balance(boxFruitAddress, accountPkh, \"2\");\n  const spotBerry = await getFA2Balance(boxFruitAddress, accountPkh, \"3\");\n  const blueStripe = await getFA2Balance(boxFruitAddress, accountPkh, \"4\");\n  const crownApple = await getFA2Balance(boxFruitAddress, accountPkh, \"5\");\n\n  dispatch({\n    type: t.WalletActionTypes.GET_BALANCES,\n    payload: {\n      tokenBalances: {\n        kUSD,\n        SEED,\n      },\n      fruitBalances: {\n        [Fruits.ELDER_GRAPE]: elderGrape,\n        [Fruits.MANGROT]: mangrot,\n        [Fruits.SPOT_BERRY]: spotBerry,\n        [Fruits.BLUE_STRIPE]: blueStripe,\n        [Fruits.CROWN_APPLE]: crownApple,\n      },\n    },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}