{"ast":null,"code":"import { OpKind } from \"@taquito/taquito\";\nimport BigNumber from \"bignumber.js\"; // Utils\n\nimport { kUSDAddress, boxPoolAddress } from \"../utils/global\";\nimport { multiply } from \"../utils/math\"; // API\n\nimport { getFA12Approval } from \"../api\"; // Redux store\n\nimport { store } from \"..\";\nexport const lockTokens = async value => {\n  const {\n    accountPkh\n  } = store.getState().wallet;\n  const {\n    kUSDContract,\n    boxPoolContract,\n    tezos\n  } = store.getState().contract;\n  if (!kUSDContract || !boxPoolContract || !tezos) return;\n  const opList = [];\n  const valueBN = multiply(value, 10 ** 18);\n  let hasApproved = false;\n\n  try {\n    // Check for approval value\n    const approvalAmount = await getFA12Approval(kUSDAddress, accountPkh, boxPoolAddress);\n\n    if (new BigNumber(approvalAmount).isLessThan(valueBN)) {\n      opList.push({\n        kind: OpKind.TRANSACTION,\n        ...kUSDContract.methods.approve(boxPoolAddress, valueBN.toString()).toTransferParams()\n      });\n      hasApproved = true;\n    } // Main operation\n\n\n    opList.push({\n      kind: OpKind.TRANSACTION,\n      ...boxPoolContract.methods.lock_tokens(valueBN.toString()).toTransferParams()\n    }); // Revoke approval\n\n    if (hasApproved) {\n      opList.push({\n        kind: OpKind.TRANSACTION,\n        ...kUSDContract.methods.approve(boxPoolAddress, 0).toTransferParams()\n      });\n    } // Return operation instance\n\n\n    const batch = await tezos.wallet.batch(opList);\n    return batch;\n  } catch (err) {\n    throw err;\n  }\n};\nexport const unlockTokens = async value => {\n  const {\n    boxPoolContract\n  } = store.getState().contract;\n  if (!boxPoolContract) return;\n\n  try {\n    const op = await boxPoolContract.methods.unlock_tokens(multiply(value, 10 ** 18));\n    return op;\n  } catch (err) {\n    throw err;\n  }\n};","map":{"version":3,"sources":["/workspace/box-defi/dapp/src/operations/pool.ts"],"names":["OpKind","BigNumber","kUSDAddress","boxPoolAddress","multiply","getFA12Approval","store","lockTokens","value","accountPkh","getState","wallet","kUSDContract","boxPoolContract","tezos","contract","opList","valueBN","hasApproved","approvalAmount","isLessThan","push","kind","TRANSACTION","methods","approve","toString","toTransferParams","lock_tokens","batch","err","unlockTokens","op","unlock_tokens"],"mappings":"AAAA,SAA+BA,MAA/B,QAA2F,kBAA3F;AACA,OAAOC,SAAP,MAAsB,cAAtB,C,CAEA;;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,iBAA5C;AACA,SAASC,QAAT,QAAyB,eAAzB,C,CAEA;;AACA,SAASC,eAAT,QAAgC,QAAhC,C,CAEA;;AACA,SAASC,KAAT,QAAsB,IAAtB;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAOC,KAAP,IAAoE;AAC5F,QAAM;AAAEC,IAAAA;AAAF,MAAiBH,KAAK,CAACI,QAAN,GAAiBC,MAAxC;AACA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,eAAhB;AAAiCC,IAAAA;AAAjC,MAA2CR,KAAK,CAACI,QAAN,GAAiBK,QAAlE;AAEA,MAAI,CAACH,YAAD,IAAiB,CAACC,eAAlB,IAAqC,CAACC,KAA1C,EAAiD;AAEjD,QAAME,MAA8B,GAAG,EAAvC;AAEA,QAAMC,OAAO,GAAGb,QAAQ,CAACI,KAAD,EAAQ,MAAM,EAAd,CAAxB;AAEA,MAAIU,WAAW,GAAG,KAAlB;;AAEA,MAAI;AACF;AACA,UAAMC,cAAc,GAAG,MAAMd,eAAe,CAACH,WAAD,EAAcO,UAAd,EAA0BN,cAA1B,CAA5C;;AACA,QAAI,IAAIF,SAAJ,CAAckB,cAAd,EAA8BC,UAA9B,CAAyCH,OAAzC,CAAJ,EAAuD;AACrDD,MAAAA,MAAM,CAACK,IAAP,CAAY;AACVC,QAAAA,IAAI,EAAEtB,MAAM,CAACuB,WADH;AAEV,WAAGX,YAAY,CAACY,OAAb,CAAqBC,OAArB,CAA6BtB,cAA7B,EAA6Cc,OAAO,CAACS,QAAR,EAA7C,EAAiEC,gBAAjE;AAFO,OAAZ;AAIAT,MAAAA,WAAW,GAAG,IAAd;AACD,KATC,CAWF;;;AACAF,IAAAA,MAAM,CAACK,IAAP,CAAY;AACVC,MAAAA,IAAI,EAAEtB,MAAM,CAACuB,WADH;AAEV,SAAGV,eAAe,CAACW,OAAhB,CAAwBI,WAAxB,CAAoCX,OAAO,CAACS,QAAR,EAApC,EAAwDC,gBAAxD;AAFO,KAAZ,EAZE,CAiBF;;AACA,QAAIT,WAAJ,EAAiB;AACfF,MAAAA,MAAM,CAACK,IAAP,CAAY;AACVC,QAAAA,IAAI,EAAEtB,MAAM,CAACuB,WADH;AAEV,WAAGX,YAAY,CAACY,OAAb,CAAqBC,OAArB,CAA6BtB,cAA7B,EAA6C,CAA7C,EAAgDwB,gBAAhD;AAFO,OAAZ;AAID,KAvBC,CAyBF;;;AACA,UAAME,KAAK,GAAG,MAAMf,KAAK,CAACH,MAAN,CAAakB,KAAb,CAAmBb,MAAnB,CAApB;AACA,WAAOa,KAAP;AACD,GA5BD,CA4BE,OAAOC,GAAP,EAAY;AACZ,UAAMA,GAAN;AACD;AACF,CA3CM;AA6CP,OAAO,MAAMC,YAAY,GAAG,MAAOvB,KAAP,IAAsE;AAChG,QAAM;AAAEK,IAAAA;AAAF,MAAsBP,KAAK,CAACI,QAAN,GAAiBK,QAA7C;AAEA,MAAI,CAACF,eAAL,EAAsB;;AAEtB,MAAI;AACF,UAAMmB,EAAE,GAAG,MAAMnB,eAAe,CAACW,OAAhB,CAAwBS,aAAxB,CAAsC7B,QAAQ,CAACI,KAAD,EAAQ,MAAM,EAAd,CAA9C,CAAjB;AACA,WAAOwB,EAAP;AACD,GAHD,CAGE,OAAOF,GAAP,EAAY;AACZ,UAAMA,GAAN;AACD;AACF,CAXM","sourcesContent":["import { WalletParamsWithKind, OpKind, WalletOperationBatch, ContractMethod, Wallet } from \"@taquito/taquito\";\nimport BigNumber from \"bignumber.js\";\n\n// Utils\nimport { kUSDAddress, boxPoolAddress } from \"../utils/global\";\nimport { multiply } from \"../utils/math\";\n\n// API\nimport { getFA12Approval } from \"../api\";\n\n// Redux store\nimport { store } from \"..\";\n\nexport const lockTokens = async (value: string): Promise<WalletOperationBatch | undefined> => {\n  const { accountPkh } = store.getState().wallet;\n  const { kUSDContract, boxPoolContract, tezos } = store.getState().contract;\n\n  if (!kUSDContract || !boxPoolContract || !tezos) return;\n\n  const opList: WalletParamsWithKind[] = [];\n\n  const valueBN = multiply(value, 10 ** 18);\n\n  let hasApproved = false;\n\n  try {\n    // Check for approval value\n    const approvalAmount = await getFA12Approval(kUSDAddress, accountPkh, boxPoolAddress);\n    if (new BigNumber(approvalAmount).isLessThan(valueBN)) {\n      opList.push({\n        kind: OpKind.TRANSACTION,\n        ...kUSDContract.methods.approve(boxPoolAddress, valueBN.toString()).toTransferParams(),\n      });\n      hasApproved = true;\n    }\n\n    // Main operation\n    opList.push({\n      kind: OpKind.TRANSACTION,\n      ...boxPoolContract.methods.lock_tokens(valueBN.toString()).toTransferParams(),\n    });\n\n    // Revoke approval\n    if (hasApproved) {\n      opList.push({\n        kind: OpKind.TRANSACTION,\n        ...kUSDContract.methods.approve(boxPoolAddress, 0).toTransferParams(),\n      });\n    }\n\n    // Return operation instance\n    const batch = await tezos.wallet.batch(opList);\n    return batch;\n  } catch (err) {\n    throw err;\n  }\n};\n\nexport const unlockTokens = async (value: string): Promise<ContractMethod<Wallet> | undefined> => {\n  const { boxPoolContract } = store.getState().contract;\n\n  if (!boxPoolContract) return;\n\n  try {\n    const op = await boxPoolContract.methods.unlock_tokens(multiply(value, 10 ** 18));\n    return op;\n  } catch (err) {\n    throw err;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}