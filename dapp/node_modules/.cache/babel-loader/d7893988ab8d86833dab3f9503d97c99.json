{"ast":null,"code":"import { BeaconWallet } from \"@taquito/beacon-wallet\"; // Actions and types\n\nimport * as t from \"../types\"; // API\n\nimport { getFA12Balance, getFA2Balance } from \"../../api\"; // Globals\n\nimport { Fruits, network, kUSDAddress, seedAddress, boxFruitAddress } from \"../../utils/global\";\nexport const connectWallet = requestPermission => async dispatch => {\n  const wallet = new BeaconWallet({\n    name: \"Box DeFi\",\n    preferredNetwork: network\n  });\n\n  if (!requestPermission) {\n    const activeAccount = await wallet.client.getActiveAccount();\n\n    if (activeAccount) {\n      const accountPkh = await wallet.getPKH();\n      dispatch({\n        type: t.WalletActionTypes.CONNECT_WALLET,\n        payload: {\n          isConnected: true,\n          walletInstance: wallet,\n          accountPkh\n        }\n      });\n    }\n  } else {\n    await wallet.requestPermissions({\n      network: {\n        type: network\n      }\n    });\n    const accountPkh = await wallet.getPKH();\n    dispatch({\n      type: t.WalletActionTypes.CONNECT_WALLET,\n      payload: {\n        isConnected: true,\n        walletInstance: wallet,\n        accountPkh\n      }\n    });\n  }\n};\nexport const getBalances = () => async (dispatch, getState) => {\n  const accountPkh = getState().wallet.accountPkh;\n  const kUSD = await getFA12Balance(kUSDAddress, accountPkh);\n  const SEED = await getFA12Balance(seedAddress, accountPkh);\n  const elderGrape = await getFA2Balance(boxFruitAddress, accountPkh, \"1\");\n  const mangrot = await getFA2Balance(boxFruitAddress, accountPkh, \"2\");\n  const spotBerry = await getFA2Balance(boxFruitAddress, accountPkh, \"3\");\n  const blueStripe = await getFA2Balance(boxFruitAddress, accountPkh, \"4\");\n  const crownApple = await getFA2Balance(boxFruitAddress, accountPkh, \"5\");\n  dispatch({\n    type: t.WalletActionTypes.GET_BALANCES,\n    payload: {\n      tokenBalances: {\n        kUSD,\n        SEED\n      },\n      fruitBalances: {\n        [Fruits.ELDER_GRAPE]: elderGrape,\n        [Fruits.MANGROT]: mangrot,\n        [Fruits.SPOT_BERRY]: spotBerry,\n        [Fruits.BLUE_STRIPE]: blueStripe,\n        [Fruits.CROWN_APPLE]: crownApple\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/workspace/box-defi/dapp/src/redux/action-creators/wallet.ts"],"names":["BeaconWallet","t","getFA12Balance","getFA2Balance","Fruits","network","kUSDAddress","seedAddress","boxFruitAddress","connectWallet","requestPermission","dispatch","wallet","name","preferredNetwork","activeAccount","client","getActiveAccount","accountPkh","getPKH","type","WalletActionTypes","CONNECT_WALLET","payload","isConnected","walletInstance","requestPermissions","getBalances","getState","kUSD","SEED","elderGrape","mangrot","spotBerry","blueStripe","crownApple","GET_BALANCES","tokenBalances","fruitBalances","ELDER_GRAPE","MANGROT","SPOT_BERRY","BLUE_STRIPE","CROWN_APPLE"],"mappings":"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","sourcesContent":["import { Dispatch } from \"redux\";\nimport { NetworkType } from \"@airgap/beacon-sdk\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\n\n// Actions and types\nimport { WalletAction } from \"../actions\";\nimport * as t from \"../types\";\n\n// API\nimport { getFA12Balance, getFA2Balance } from \"../../api\";\n\n// Globals\nimport { Fruits, network, kUSDAddress, seedAddress, boxFruitAddress } from \"../../utils/global\";\n\nimport { RootState } from \"../reducers\";\n\nexport const connectWallet =\n  (requestPermission: boolean) =>\n  async (dispatch: Dispatch<WalletAction>): Promise<void> => {\n    const wallet = new BeaconWallet({\n      name: \"Box DeFi\",\n      preferredNetwork: network as NetworkType,\n    });\n\n    if (!requestPermission) {\n      const activeAccount = await wallet.client.getActiveAccount();\n      if (activeAccount) {\n        const accountPkh = await wallet.getPKH();\n\n        dispatch({\n          type: t.WalletActionTypes.CONNECT_WALLET,\n          payload: {\n            isConnected: true,\n            walletInstance: wallet,\n            accountPkh,\n          },\n        });\n      }\n    } else {\n      await wallet.requestPermissions({ network: { type: network as NetworkType } });\n\n      const accountPkh = await wallet.getPKH();\n\n      dispatch({\n        type: t.WalletActionTypes.CONNECT_WALLET,\n        payload: {\n          isConnected: true,\n          walletInstance: wallet,\n          accountPkh,\n        },\n      });\n    }\n  };\n\nexport const getBalances = () => async (dispatch: Dispatch<WalletAction>, getState: () => RootState) => {\n  const accountPkh = getState().wallet.accountPkh;\n\n  const kUSD = await getFA12Balance(kUSDAddress, accountPkh);\n  const SEED = await getFA12Balance(seedAddress, accountPkh);\n\n  const elderGrape = await getFA2Balance(boxFruitAddress, accountPkh, \"1\");\n  const mangrot = await getFA2Balance(boxFruitAddress, accountPkh, \"2\");\n  const spotBerry = await getFA2Balance(boxFruitAddress, accountPkh, \"3\");\n  const blueStripe = await getFA2Balance(boxFruitAddress, accountPkh, \"4\");\n  const crownApple = await getFA2Balance(boxFruitAddress, accountPkh, \"5\");\n\n  dispatch({\n    type: t.WalletActionTypes.GET_BALANCES,\n    payload: {\n      tokenBalances: {\n        kUSD,\n        SEED,\n      },\n      fruitBalances: {\n        [Fruits.ELDER_GRAPE]: elderGrape,\n        [Fruits.MANGROT]: mangrot,\n        [Fruits.SPOT_BERRY]: spotBerry,\n        [Fruits.BLUE_STRIPE]: blueStripe,\n        [Fruits.CROWN_APPLE]: crownApple,\n      },\n    },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}