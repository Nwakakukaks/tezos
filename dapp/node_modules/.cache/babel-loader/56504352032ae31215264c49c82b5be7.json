{"ast":null,"code":"// Actions and types\nimport * as t from \"../types\";\nexport let Status;\n\n(function (Status) {\n  Status[\"LOADING\"] = \"LOADING\";\n  Status[\"SUCCESS\"] = \"SUCCESS\";\n  Status[\"FAILURE\"] = \"FAILURE\";\n})(Status || (Status = {}));\n\nconst initialState = {\n  show: false,\n  status: undefined,\n  text: \"\"\n};\nexport const loaderReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case t.LoaderActionTypes.SET_LOADING:\n      {\n        return {\n          show: true,\n          status: Status.LOADING,\n          text: action.payload\n        };\n      }\n\n    case t.LoaderActionTypes.SET_SUCCESS:\n      {\n        return {\n          show: true,\n          status: Status.SUCCESS,\n          text: action.payload\n        };\n      }\n\n    case t.LoaderActionTypes.SET_FAILURE:\n      {\n        return {\n          show: true,\n          status: Status.FAILURE,\n          text: action.payload\n        };\n      }\n\n    case t.LoaderActionTypes.HIDE_LOADER:\n      {\n        return { ...state,\n          show: false\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};","map":{"version":3,"sources":["/workspace/box-defi/dapp/src/redux/reducers/loader.ts"],"names":["t","Status","initialState","show","status","undefined","text","loaderReducer","state","action","type","LoaderActionTypes","SET_LOADING","LOADING","payload","SET_SUCCESS","SUCCESS","SET_FAILURE","FAILURE","HIDE_LOADER"],"mappings":"AAEA;AAEA,OAAO,KAAKA,CAAZ,MAAmB,UAAnB;AAEA,WAAYC,MAAZ;;WAAYA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;GAAAA,M,KAAAA,M;;AAYZ,MAAMC,YAAyB,GAAG;AAChCC,EAAAA,IAAI,EAAE,KAD0B;AAEhCC,EAAAA,MAAM,EAAEC,SAFwB;AAGhCC,EAAAA,IAAI,EAAE;AAH0B,CAAlC;AAMA,OAAO,MAAMC,aAAgD,GAAG,YAA+C;AAAA,MAA9CC,KAA8C,uEAAtCN,YAAsC;AAAA,MAAxBO,MAAwB;;AAC7G,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,CAAC,CAACW,iBAAF,CAAoBC,WAAzB;AAAsC;AACpC,eAAO;AACLT,UAAAA,IAAI,EAAE,IADD;AAELC,UAAAA,MAAM,EAAEH,MAAM,CAACY,OAFV;AAGLP,UAAAA,IAAI,EAAEG,MAAM,CAACK;AAHR,SAAP;AAKD;;AACD,SAAKd,CAAC,CAACW,iBAAF,CAAoBI,WAAzB;AAAsC;AACpC,eAAO;AACLZ,UAAAA,IAAI,EAAE,IADD;AAELC,UAAAA,MAAM,EAAEH,MAAM,CAACe,OAFV;AAGLV,UAAAA,IAAI,EAAEG,MAAM,CAACK;AAHR,SAAP;AAKD;;AACD,SAAKd,CAAC,CAACW,iBAAF,CAAoBM,WAAzB;AAAsC;AACpC,eAAO;AACLd,UAAAA,IAAI,EAAE,IADD;AAELC,UAAAA,MAAM,EAAEH,MAAM,CAACiB,OAFV;AAGLZ,UAAAA,IAAI,EAAEG,MAAM,CAACK;AAHR,SAAP;AAKD;;AACD,SAAKd,CAAC,CAACW,iBAAF,CAAoBQ,WAAzB;AAAsC;AACpC,eAAO,EACL,GAAGX,KADE;AAELL,UAAAA,IAAI,EAAE;AAFD,SAAP;AAID;;AACD;AAAS;AACP,eAAOK,KAAP;AACD;AA9BH;AAgCD,CAjCM","sourcesContent":["import { Reducer } from \"redux\";\n\n// Actions and types\nimport { LoaderAcion } from \"../actions\";\nimport * as t from \"../types\";\n\nexport enum Status {\n  LOADING = \"LOADING\",\n  SUCCESS = \"SUCCESS\",\n  FAILURE = \"FAILURE\",\n}\n\ninterface LoaderState {\n  show: boolean;\n  status: Status | undefined;\n  text: string;\n}\n\nconst initialState: LoaderState = {\n  show: false,\n  status: undefined,\n  text: \"\",\n};\n\nexport const loaderReducer: Reducer<LoaderState, LoaderAcion> = (state = initialState, action): LoaderState => {\n  switch (action.type) {\n    case t.LoaderActionTypes.SET_LOADING: {\n      return {\n        show: true,\n        status: Status.LOADING,\n        text: action.payload,\n      };\n    }\n    case t.LoaderActionTypes.SET_SUCCESS: {\n      return {\n        show: true,\n        status: Status.SUCCESS,\n        text: action.payload,\n      };\n    }\n    case t.LoaderActionTypes.SET_FAILURE: {\n      return {\n        show: true,\n        status: Status.FAILURE,\n        text: action.payload,\n      };\n    }\n    case t.LoaderActionTypes.HIDE_LOADER: {\n      return {\n        ...state,\n        show: false,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}