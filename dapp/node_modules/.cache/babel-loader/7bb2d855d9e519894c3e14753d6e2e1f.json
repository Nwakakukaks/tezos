{"ast":null,"code":"import { TezosToolkit } from \"@taquito/taquito\";\nimport * as t from \"../types\"; // Root state of the reducer\n\n// Utils\nimport { kUSDAddress, seedAddress, boxFruitAddress, boxPoolAddress, boxFarmAddress, kUSDFaucetAddress, rpcNode } from \"../../utils/global\";\nexport const loadContracts = () => async (dispatch, getState) => {\n  const walletInstance = getState().wallet.walletInstance;\n  const Tezos = new TezosToolkit(rpcNode);\n  Tezos.setWalletProvider(walletInstance);\n\n  try {\n    const kUSDContract = await Tezos.wallet.at(kUSDAddress);\n    const seedContract = await Tezos.wallet.at(seedAddress);\n    const boxFruitContract = await Tezos.wallet.at(boxFruitAddress);\n    const boxPoolContract = await Tezos.wallet.at(boxPoolAddress);\n    const boxFarmContract = await Tezos.wallet.at(boxFarmAddress);\n    const kUSDFaucetContract = await Tezos.wallet.at(kUSDFaucetAddress);\n    dispatch({\n      type: t.ContractActionTypes.LOAD_CONTRACTS,\n      payload: {\n        tezos: Tezos,\n        kUSDContract,\n        seedContract,\n        boxFruitContract,\n        boxPoolContract,\n        boxFarmContract,\n        kUSDFaucetContract\n      }\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"sources":["/workspace/box-defi/dapp/src/redux/action-creators/contract.ts"],"names":["TezosToolkit","t","kUSDAddress","seedAddress","boxFruitAddress","boxPoolAddress","boxFarmAddress","kUSDFaucetAddress","rpcNode","loadContracts","dispatch","getState","walletInstance","wallet","Tezos","setWalletProvider","kUSDContract","at","seedContract","boxFruitContract","boxPoolContract","boxFarmContract","kUSDFaucetContract","type","ContractActionTypes","LOAD_CONTRACTS","payload","tezos","err","console","error"],"mappings":"AACA,SAASA,YAAT,QAA6B,kBAA7B;AAKA,OAAO,KAAKC,CAAZ,MAAmB,UAAnB,C,CAEA;;AAGA;AACA,SACEC,WADF,EAEEC,WAFF,EAGEC,eAHF,EAIEC,cAJF,EAKEC,cALF,EAMEC,iBANF,EAOEC,OAPF,QAQO,oBARP;AAUA,OAAO,MAAMC,aAAa,GACxB,MACA,OAAOC,QAAP,EAA2CC,QAA3C,KAAwF;AACtF,QAAMC,cAAc,GAAGD,QAAQ,GAAGE,MAAX,CAAkBD,cAAzC;AAEA,QAAME,KAAK,GAAG,IAAId,YAAJ,CAAiBQ,OAAjB,CAAd;AACAM,EAAAA,KAAK,CAACC,iBAAN,CAAwBH,cAAxB;;AAEA,MAAI;AACF,UAAMI,YAAY,GAAG,MAAMF,KAAK,CAACD,MAAN,CAAaI,EAAb,CAAgBf,WAAhB,CAA3B;AACA,UAAMgB,YAAY,GAAG,MAAMJ,KAAK,CAACD,MAAN,CAAaI,EAAb,CAAgBd,WAAhB,CAA3B;AACA,UAAMgB,gBAAgB,GAAG,MAAML,KAAK,CAACD,MAAN,CAAaI,EAAb,CAAgBb,eAAhB,CAA/B;AACA,UAAMgB,eAAe,GAAG,MAAMN,KAAK,CAACD,MAAN,CAAaI,EAAb,CAAgBZ,cAAhB,CAA9B;AACA,UAAMgB,eAAe,GAAG,MAAMP,KAAK,CAACD,MAAN,CAAaI,EAAb,CAAgBX,cAAhB,CAA9B;AACA,UAAMgB,kBAAkB,GAAG,MAAMR,KAAK,CAACD,MAAN,CAAaI,EAAb,CAAgBV,iBAAhB,CAAjC;AAEAG,IAAAA,QAAQ,CAAC;AACPa,MAAAA,IAAI,EAAEtB,CAAC,CAACuB,mBAAF,CAAsBC,cADrB;AAEPC,MAAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAEb,KADA;AAEPE,QAAAA,YAFO;AAGPE,QAAAA,YAHO;AAIPC,QAAAA,gBAJO;AAKPC,QAAAA,eALO;AAMPC,QAAAA,eANO;AAOPC,QAAAA;AAPO;AAFF,KAAD,CAAR;AAYD,GApBD,CAoBE,OAAOM,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,CA/BI","sourcesContent":["import { Dispatch } from \"redux\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\n\n// Actions and types\nimport { ContractAction } from \"../actions\";\nimport * as t from \"../types\";\n\n// Root state of the reducer\nimport { RootState } from \"../reducers\";\n\n// Utils\nimport {\n  kUSDAddress,\n  seedAddress,\n  boxFruitAddress,\n  boxPoolAddress,\n  boxFarmAddress,\n  kUSDFaucetAddress,\n  rpcNode,\n} from \"../../utils/global\";\n\nexport const loadContracts =\n  () =>\n  async (dispatch: Dispatch<ContractAction>, getState: () => RootState): Promise<void> => {\n    const walletInstance = getState().wallet.walletInstance as BeaconWallet;\n\n    const Tezos = new TezosToolkit(rpcNode);\n    Tezos.setWalletProvider(walletInstance);\n\n    try {\n      const kUSDContract = await Tezos.wallet.at(kUSDAddress);\n      const seedContract = await Tezos.wallet.at(seedAddress);\n      const boxFruitContract = await Tezos.wallet.at(boxFruitAddress);\n      const boxPoolContract = await Tezos.wallet.at(boxPoolAddress);\n      const boxFarmContract = await Tezos.wallet.at(boxFarmAddress);\n      const kUSDFaucetContract = await Tezos.wallet.at(kUSDFaucetAddress);\n\n      dispatch({\n        type: t.ContractActionTypes.LOAD_CONTRACTS,\n        payload: {\n          tezos: Tezos,\n          kUSDContract,\n          seedContract,\n          boxFruitContract,\n          boxPoolContract,\n          boxFarmContract,\n          kUSDFaucetContract,\n        },\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}