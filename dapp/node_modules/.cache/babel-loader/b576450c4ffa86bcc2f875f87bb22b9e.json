{"ast":null,"code":"import { OpKind } from \"@taquito/taquito\";\nimport BigNumber from \"bignumber.js\"; // Utils\n\nimport { boxFarmAddress, seedAddress, seedsPerBox } from \"../utils/global\";\nimport { multiply } from \"../utils/math\"; // API\n\nimport { getFA12Approval } from \"../api\"; // Redux store\n\nimport { store } from \"..\";\nexport const plantSeeds = async boxes => {\n  const {\n    accountPkh\n  } = store.getState().wallet;\n  const {\n    boxFarmContract,\n    seedContract,\n    tezos\n  } = store.getState().contract;\n  if (!boxFarmContract || !seedContract || !tezos) return;\n  const opList = [];\n  const seedRequired = multiply(boxes * seedsPerBox, 10 ** 18);\n  let hasApproved = false;\n\n  try {\n    // Check for approval value\n    const approvalAmount = await getFA12Approval(seedAddress, accountPkh, boxFarmAddress);\n\n    if (new BigNumber(approvalAmount).isLessThan(seedRequired)) {\n      opList.push({\n        kind: OpKind.TRANSACTION,\n        ...seedContract.methods.approve(boxFarmAddress, seedRequired.toString()).toTransferParams()\n      });\n      hasApproved = true;\n    } // Main operation\n\n\n    opList.push({\n      kind: OpKind.TRANSACTION,\n      ...boxFarmContract.methods.plant_seeds(boxes).toTransferParams()\n    }); // Revoke approval\n\n    if (hasApproved) {\n      opList.push({\n        kind: OpKind.TRANSACTION,\n        ...seedContract.methods.approve(boxFarmAddress, 0).toTransferParams()\n      });\n    } // Return operation instance\n\n\n    const batch = await tezos.wallet.batch(opList);\n    return batch;\n  } catch (err) {\n    throw err;\n  }\n};\nexport const waterPlants = async boxes => {\n  const {\n    boxFarmContract\n  } = store.getState().contract;\n  if (!boxFarmContract) return;\n\n  try {\n    const op = await boxFarmContract.methods.water_plants(boxes);\n    return op;\n  } catch (err) {\n    throw err;\n  }\n};\nexport const harvest = async boxId => {\n  const {\n    boxFarmContract\n  } = store.getState().contract;\n  if (!boxFarmContract) return;\n\n  try {\n    const op = await boxFarmContract.methods.harvest(boxId);\n    return op;\n  } catch (err) {\n    throw err;\n  }\n};\nexport const deseed = async (tokenId, amount) => {\n  const {\n    boxFarmContract\n  } = store.getState().contract;\n  if (!boxFarmContract) return;\n\n  try {\n    const op = await boxFarmContract.methods.deseed([{\n      token_id: tokenId,\n      amount\n    }]);\n    return op;\n  } catch (err) {\n    throw err;\n  }\n};\nexport const merge = async tokenId => {\n  const {\n    boxFarmContract\n  } = store.getState().contract;\n  if (!boxFarmContract) return;\n\n  try {\n    const op = await boxFarmContract.methods.merge(tokenId);\n    return op;\n  } catch (err) {\n    throw err;\n  }\n};","map":{"version":3,"sources":["/workspace/box-defi/dapp/src/operations/farm.ts"],"names":["OpKind","BigNumber","boxFarmAddress","seedAddress","seedsPerBox","multiply","getFA12Approval","store","plantSeeds","boxes","accountPkh","getState","wallet","boxFarmContract","seedContract","tezos","contract","opList","seedRequired","hasApproved","approvalAmount","isLessThan","push","kind","TRANSACTION","methods","approve","toString","toTransferParams","plant_seeds","batch","err","waterPlants","op","water_plants","harvest","boxId","deseed","tokenId","amount","token_id","merge"],"mappings":"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","sourcesContent":["import { WalletParamsWithKind, OpKind, WalletOperationBatch, ContractMethod, Wallet } from \"@taquito/taquito\";\nimport BigNumber from \"bignumber.js\";\n\n// Utils\nimport { boxFarmAddress, seedAddress, seedsPerBox } from \"../utils/global\";\nimport { multiply } from \"../utils/math\";\n\n// API\nimport { getFA12Approval } from \"../api\";\n\n// Redux store\nimport { store } from \"..\";\n\nexport const plantSeeds = async (boxes: number): Promise<WalletOperationBatch | undefined> => {\n  const { accountPkh } = store.getState().wallet;\n  const { boxFarmContract, seedContract, tezos } = store.getState().contract;\n\n  if (!boxFarmContract || !seedContract || !tezos) return;\n\n  const opList: WalletParamsWithKind[] = [];\n\n  const seedRequired = multiply(boxes * seedsPerBox, 10 ** 18);\n\n  let hasApproved = false;\n\n  try {\n    // Check for approval value\n    const approvalAmount = await getFA12Approval(seedAddress, accountPkh, boxFarmAddress);\n    if (new BigNumber(approvalAmount).isLessThan(seedRequired)) {\n      opList.push({\n        kind: OpKind.TRANSACTION,\n        ...seedContract.methods.approve(boxFarmAddress, seedRequired.toString()).toTransferParams(),\n      });\n      hasApproved = true;\n    }\n\n    // Main operation\n    opList.push({\n      kind: OpKind.TRANSACTION,\n      ...boxFarmContract.methods.plant_seeds(boxes).toTransferParams(),\n    });\n\n    // Revoke approval\n    if (hasApproved) {\n      opList.push({\n        kind: OpKind.TRANSACTION,\n        ...seedContract.methods.approve(boxFarmAddress, 0).toTransferParams(),\n      });\n    }\n\n    // Return operation instance\n    const batch = await tezos.wallet.batch(opList);\n    return batch;\n  } catch (err) {\n    throw err;\n  }\n};\n\nexport const waterPlants = async (boxes: number[]): Promise<ContractMethod<Wallet> | undefined> => {\n  const { boxFarmContract } = store.getState().contract;\n\n  if (!boxFarmContract) return;\n\n  try {\n    const op = await boxFarmContract.methods.water_plants(boxes);\n    return op;\n  } catch (err) {\n    throw err;\n  }\n};\n\nexport const harvest = async (boxId: number): Promise<ContractMethod<Wallet> | undefined> => {\n  const { boxFarmContract } = store.getState().contract;\n\n  if (!boxFarmContract) return;\n\n  try {\n    const op = await boxFarmContract.methods.harvest(boxId);\n    return op;\n  } catch (err) {\n    throw err;\n  }\n};\n\nexport const deseed = async (tokenId: number, amount: number): Promise<ContractMethod<Wallet> | undefined> => {\n  const { boxFarmContract } = store.getState().contract;\n\n  if (!boxFarmContract) return;\n\n  try {\n    const op = await boxFarmContract.methods.deseed([{ token_id: tokenId, amount }]);\n    return op;\n  } catch (err) {\n    throw err;\n  }\n};\n\nexport const merge = async (tokenId: number): Promise<ContractMethod<Wallet> | undefined> => {\n  const { boxFarmContract } = store.getState().contract;\n\n  if (!boxFarmContract) return;\n\n  try {\n    const op = await boxFarmContract.methods.merge(tokenId);\n    return op;\n  } catch (err) {\n    throw err;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}